import { AngularFirestoreCollection, DocumentChangeAction } from '@angular/fire/firestore';
import { Item } from './models/item';
import { AngularFirestore, AngularFirestoreDocument } from 'angularfire2/firestore';
import { Injectable } from '@angular/core';
import { ShoppingCart } from './models/shopping-cart';
import { Observable, combineLatest, of, from } from 'rxjs';
import { Product } from './models/product';
import { map, take, flatMap, filter, mergeMap } from 'rxjs/operators';
import { ConvertActionBindingResult } from '@angular/compiler/src/compiler_util/expression_converter';


interface DocWithId { id: string; }

@Injectable({
  providedIn: 'root'
})
export class ShoppingCartService {

  constructor(private firestore: AngularFirestore) {
  }

  private create() {

    console.log("create cart called...");
    let id = this.firestore.createId();
    console.log("random id generated by firestore: " + id);
    let cart = { dateCreated: new Date().getTime() };
    let promise = this.firestore
      .collection('shopping-carts')
      .doc(id)
      .set(cart)
      .then(() => {
        let shoppingCart: ShoppingCart = { id: id, dateCreated: cart.dateCreated, items: [] };
        return shoppingCart;
      });
    return promise;
  }

  private async getOrCreateCartId() {
    console.log("getOrCreateCart called...");
    let cartId = localStorage.getItem('cartId');

    if (cartId) return cartId;

    console.log("cardId not found form localStorage...");
    let result = await this.create();
    localStorage.setItem("cartId", result.id);
    return result.id;
  }

  public getItem(cartId: string, productId: string) {
    return this.firestore
      .collection('shopping-carts')
      .doc(cartId)
      .collection('items')
      .doc(productId)
  }

  convertSnapshots<T>(snaps) {
    return <T[]>snaps.map(snap => {
      return {
        id: snap.payload.doc.id,
        ...snap.payload.doc.data()
      };
    });
  }

  async getKortti<ShoppingCart>() {
    let cartId = await this.getOrCreateCartId();
    console.log("getKortti called with cartId: ", cartId);
    let carts = this.firestore.collection<ShoppingCart>('shopping-carts');
    let carts$ = carts.snapshotChanges();
    var cartList: ShoppingCart[] = [];
    var items: Item[] = []

    carts$.forEach(cart => {

      cart.filter(a => a.payload.doc.id == cartId)  //filter only relevat shoppingCart
        .forEach(a => {

          let readItems = this.firestore.collection('shopping-carts').doc(cartId).collection<Item>('items');
          let readItems$ = readItems.snapshotChanges();

          //get items from 'items' subcollection
          readItems$.pipe(flatMap(p => p)).subscribe(i => {
            let data = i.payload.doc.data();
            let id = i.payload.doc.id;
            let item = { id, ...data } as Item;
            items.push(item);
          });

          //get shopping cart from 'shopping-carts' collection
          let data = a.payload.doc.data();
          let id = a.payload.doc.id;
          let cart = { id, ...data, items } as ShoppingCart;
          cartList.push(cart);
          //console.log("cart: ", cart);
        })
    });

    console.log("cartList: ", cartList);
    return of(cartList);

  }

  async addToCart(product: Product) {
    console.log("addToCart called...");

    // this.getKortti();   //testausta varten

    let cartId = await this.getOrCreateCartId();
    console.log("cartId is: " + cartId + ", productId is: " + product.id);
    let document = this.getItem(cartId, product.id);

    document.snapshotChanges()
      .pipe(take(1))
      .subscribe(action => {
        if (action.payload.exists) {
          let i = action.payload.data() as Item;
          let quantity = i.quantity + 1
          document.update({ quantity: quantity });
          console.log("quantity: ", quantity);
        } else {
          document.set({ quantity: 1, product: product });
          console.log("new product added to shopping-cart");
        }
      });
  }

  async removeFromCart(product: Product) {
    console.log("removeFromCart called...");
    let cartId = await this.getOrCreateCartId();
    console.log("cartId is: " + cartId + ", productId is: " + product.id);
    let document = this.getItem(cartId, product.id);

    document.snapshotChanges()
      .pipe(take(1))
      .subscribe(action => {
        if (action.payload.exists) {
          let i = action.payload.data() as Item;
          let quantity = i.quantity - 1
          document.update({ quantity: quantity });
          console.log("quantity: ", quantity);
        }
      });
  }

  private getCart(cartId: string) {
    console.log("getCart called...");
    let promise = this.firestore.collection('shopping-carts').doc(cartId).get().toPromise()
      .then((snapshot) => {
        return snapshot.data() as ShoppingCart;
      });
    return promise;
  }
}